--// VenyxUI Reuploaded & Fixed with Utility

local library = {flags = {}, theme = {}}
local utility = {}

function utility:Create(class, props, children)
    local obj = Instance.new(class)
    for i,v in pairs(props or {}) do
        obj[i] = v
    end
    for _, child in ipairs(children or {}) do
        child.Parent = obj
    end
    return obj
end

function utility:DraggingEnabled(frame, parent)
    parent = parent or frame
    local dragging, dragInput, dragStart, startPos
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = parent.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            parent.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                        startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

function utility:InitializeKeybind()
    -- Optional: can add toggle keybind logic here
end

-- MAIN LIBRARY
function library.new(title, icon)
    local venyx = {
        pages = {},
        setTheme = function() end, -- placeholder
        Notify = function(_, title, text)
            game.StarterGui:SetCore("SendNotification", {
                Title = title,
                Text = text,
                Duration = 3
            })
        end
    }

    local screenGui = utility:Create("ScreenGui", {
        Name = title,
        Parent = game:GetService("CoreGui"),
        ResetOnSpawn = false
    })

    local mainFrame = utility:Create("Frame", {
        Name = "Main",
        Size = UDim2.new(0, 600, 0, 400),
        Position = UDim2.new(0.5, -300, 0.5, -200),
        BackgroundColor3 = Color3.fromRGB(24, 24, 24),
        BorderSizePixel = 0,
        Active = true,
        Draggable = true
    }, {
        utility:Create("UICorner", {CornerRadius = UDim.new(0, 8)}),
        utility:Create("TextLabel", {
            Text = title,
            Size = UDim2.new(1, 0, 0, 40),
            BackgroundTransparency = 1,
            TextColor3 = Color3.new(1,1,1),
            Font = Enum.Font.GothamBold,
            TextSize = 18
        }),
        utility:Create("Frame", {
            Name = "Pages",
            Position = UDim2.new(0, 0, 0, 40),
            Size = UDim2.new(1, 0, 1, -40),
            BackgroundTransparency = 1
        })
    })

    screenGui.Parent = game:GetService("CoreGui")
    venyx.gui = screenGui
    venyx.main = mainFrame
    venyx.pagesContainer = mainFrame.Pages
    venyx.theme = {}

    function venyx:addPage(name, icon)
        local page = utility:Create("Frame", {
            Name = name,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = false,
            Parent = self.pagesContainer
        })

        local sections = {}

        local pageObject = {
            name = name,
            frame = page,
            sections = sections,
            addSection = function(_, sectionName)
                local section = utility:Create("Frame", {
                    Size = UDim2.new(1, 0, 0, 100),
                    BackgroundTransparency = 1,
                    Parent = page
                }, {
                    utility:Create("TextLabel", {
                        Text = sectionName,
                        Size = UDim2.new(1, 0, 0, 20),
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.GothamBold,
                        TextSize = 14,
                        TextXAlignment = Enum.TextXAlignment.Left
                    })
                })

                table.insert(sections, section)
                return {
                    addToggle = function(_, text, default, callback)
                        local toggle = utility:Create("TextButton", {
                            Size = UDim2.new(1, 0, 0, 30),
                            Text = "[ ] " .. text,
                            BackgroundColor3 = Color3.fromRGB(20, 20, 20),
                            TextColor3 = Color3.new(1, 1, 1),
                            Font = Enum.Font.Gotham,
                            TextSize = 14,
                            Parent = section
                        })
                        local state = default
                        toggle.MouseButton1Click:Connect(function()
                            state = not state
                            toggle.Text = (state and "[âœ“] " or "[ ] ") .. text
                            pcall(callback, state)
                        end)
                        return toggle
                    end,
                    addTextbox = function(_, placeholder, default, callback)
                        local box = utility:Create("TextBox", {
                            Text = default,
                            PlaceholderText = placeholder,
                            Size = UDim2.new(1, 0, 0, 30),
                            BackgroundColor3 = Color3.fromRGB(20, 20, 20),
                            TextColor3 = Color3.new(1, 1, 1),
                            Font = Enum.Font.Gotham,
                            TextSize = 14,
                            Parent = section
                        })
                        box.FocusLost:Connect(function()
                            pcall(callback, box.Text)
                        end)
                        return box
                    end,
                    addDropdown = function(_, textList, callback)
                        local dropdown = utility:Create("TextButton", {
                            Text = "Choose...",
                            Size = UDim2.new(1, 0, 0, 30),
                            BackgroundColor3 = Color3.fromRGB(20, 20, 20),
                            TextColor3 = Color3.new(1, 1, 1),
                            Font = Enum.Font.Gotham,
                            TextSize = 14,
                            Parent = section
                        })
                        dropdown.MouseButton1Click:Connect(function()
                            local choice = textList[1]
                            dropdown.Text = choice
                            pcall(callback, choice)
                        end)
                        return dropdown
                    end,
                    addButton = function(_, text, callback)
                        local button = utility:Create("TextButton", {
                            Text = text,
                            Size = UDim2.new(1, 0, 0, 30),
                            BackgroundColor3 = Color3.fromRGB(10, 10, 10),
                            TextColor3 = Color3.new(1, 1, 1),
                            Font = Enum.Font.Gotham,
                            TextSize = 14,
                            Parent = section
                        })
                        button.MouseButton1Click:Connect(function()
                            pcall(callback)
                        end)
                        return button
                    end,
                    addColorPicker = function(_, label, default, callback)
                        -- Dummy since ColorPicker is not native in Lua executors
                        return utility:Create("TextLabel", {
                            Text = label .. " (no picker)",
                            Size = UDim2.new(1, 0, 0, 20),
                            TextColor3 = default,
                            BackgroundTransparency = 1,
                            Parent = section
                        })
                    end
                }
            end
        }

        table.insert(self.pages, pageObject)
        return pageObject
    end

    function venyx:SelectPage(pageObj, _)
        for _, p in ipairs(self.pages) do
            p.frame.Visible = false
        end
        pageObj.frame.Visible = true
    end

    return venyx
end

return library
